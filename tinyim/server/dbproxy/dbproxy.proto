syntax = "proto3";
package tinyim;

import "common/messages.proto";

option cc_generic_services = true;

message Session{
    bool has_session = 1;
    int64 user_id = 2;
    string addr = 3; // ip:port
}

message Sessions{
    repeated Session session = 1;
}
message UserIdAndGroupId {
    int64 msg_id = 1;
    int64 group_id = 2;

    int32 msg_count = 3; // client can choose get how many msgs
}

message PairUserId {
    int64 user_id = 1;
    int64 peer_id = 2;

    int32 msg_count = 3; // client can choose get how many msgs
}

message PairMsgId {
    int64 user_id = 1;
    int64 start_msg_id = 2;
    int64 end_msg_id = 3;
}

service DbproxyService {
    rpc Test(Ping) returns (Pong);

    rpc AuthAndSaveSession(SigninData) returns (Pong);
    rpc ClearSession(UserId) returns (Pong);
    // rpc ChangeSession(UserId) returns (Pong);

    rpc SavePrivateMsg(NewPrivateMsg) returns (Reply);
    rpc SaveGroupMsg(NewGroupMsg) returns (Reply);
    // rpc SaveGroupMsg() returns (Reply);
    // rpc GetMsg(UserId) returns (Msg);
    rpc GetGroupMember(GroupId) returns (UserIds);
    rpc GetLastGroupMsgs(UserIdAndGroupId) returns (Msgs);
    rpc GetPrivateMsgs(PairUserId) returns (Msgs);
    rpc GetUserMsgs(PairMsgId) returns (Msgs);

    // rpc GetAllNewMsgs(UserId) returns (Msgs);


    rpc GetLastMsgId(UserId) returns (MsgId);

    // TODO get and set should atomic for idempotent
    // rpc CasUserLastSendData(UserLastSendData) returns (Pong);
    rpc SetUserLastSendData(UserLastSendData) returns (Pong);
    rpc GetUserLastSendData(UserId) returns (UserLastSendData);


    rpc GetSessions(UserIds) returns (Sessions);
}